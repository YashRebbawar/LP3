Prac 3
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;
contract SendMoneExample{
    uint public balanceReceived;
    function receiveMoney() public payable {
        balanceReceived += msg.value;
    }
    function getBalance() public view returns (uint){
        return address (this).balance;
    }
    function withdrawMoneyTo(address payable _to) public {
        _to.transfer (getBalance());
    }
}

################################################################
Prac 4
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;
contract MarksManagmtSys
{
    struct Student
    {
        int ID;
        string fname;
        string lname;
        int marks;
    }
    address owner;
    int public stdCount = 0;
    mapping(int => Student) public stdRecords;
    
    modifier onlyOwner
    {
        require(owner ==msg.sender);
        _;
    }
    constructor()
    {
        owner=msg.sender;
    }
    function addNewRecords(int _ID,
                        string memory _fName,
                        string memory _lName,
                        int _marks) public onlyOwner
    {
        stdCount = stdCount + 1;
        stdRecords[stdCount] = Student(_ID, _fName,
                                    _lName, _marks);
    }
    function bonusMarks(int _bonus) public onlyOwner
    {

        stdRecords[stdCount].marks =
                    stdRecords[stdCount].marks + _bonus;
    }                    
}
